// <auto-generated />
using System;
using ApiClinicaV1.Models.config;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiClinicaV1.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241030145835_nwdatabase")]
    partial class nwdatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("ApiClinicaV1.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUser")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsValid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdUser");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.AppointmentMedicine", b =>
                {
                    b.Property<int>("IdAppointmentxMedicines")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MedicineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MedicinesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdAppointmentxMedicines");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("AppointmentMedicines");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.BloodExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BloodPressure")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cholesterol")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Glucose")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hemoglobin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUser")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGood")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Platelets")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RedCells")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WhiteCells")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("BloodExams");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.Doctor", b =>
                {
                    b.Property<int>("IdDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Servicio")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdDoctor");

                    b.HasIndex("Servicio");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.MedicalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BloodPressure")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeartRate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUser")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Temperature")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Weight")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdUser")
                        .IsUnique();

                    b.ToTable("MedicalInformations");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.Servicio", b =>
                {
                    b.Property<int>("IdServicios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdServicios");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("TEXT");

                    b.Property<int>("Blood")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cellphone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDonor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.Appointment", b =>
                {
                    b.HasOne("ApiClinicaV1.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClinicaV1.Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.AppointmentMedicine", b =>
                {
                    b.HasOne("ApiClinicaV1.Models.Appointment", "Appointment")
                        .WithMany("AppointmentMedicines")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiClinicaV1.Models.Medicine", null)
                        .WithMany("AppointmentMedicines")
                        .HasForeignKey("MedicineId");

                    b.HasOne("ApiClinicaV1.Models.Medicine", "Medicines")
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.BloodExam", b =>
                {
                    b.HasOne("ApiClinicaV1.Models.User", "User")
                        .WithMany("BloodExams")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.Doctor", b =>
                {
                    b.HasOne("ApiClinicaV1.Models.Servicio", "Service")
                        .WithMany("Doctors")
                        .HasForeignKey("Servicio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.Donation", b =>
                {
                    b.HasOne("ApiClinicaV1.Models.User", "User")
                        .WithMany("Donations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.MedicalInformation", b =>
                {
                    b.HasOne("ApiClinicaV1.Models.User", "User")
                        .WithOne("MedicalInfo")
                        .HasForeignKey("ApiClinicaV1.Models.MedicalInformation", "IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentMedicines");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.Medicine", b =>
                {
                    b.Navigation("AppointmentMedicines");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.Servicio", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("ApiClinicaV1.Models.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("BloodExams");

                    b.Navigation("Donations");

                    b.Navigation("MedicalInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
